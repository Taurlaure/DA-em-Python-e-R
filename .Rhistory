dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("C" , sep = ";" , na.strings = "" , stringsAsFactors = T)
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
#Colunas
#Dar nomes corretos as colunas
colnames(dados) = c("ID","SCORE","ESTADO","GENERO","IDADE","PATRIMONIO","SALDO","PRODUTOS","TEMCARTCREDITO","ATIVO","SALARIO","SAIU")
head(dados)
counts = table(dados$ESTADO)
counts
barplot(counts, main="ESTADOS" , xlab = "Estados")
barplot(countsGenero, main="GENEROS" , xlab = "GENEROS")
countsEstado = table(dados$ESTADO)
countsEstado
barplot(countsEstado, main="ESTADOS" , xlab = "Estados")
#Generos
countsGenero = table(dados$GENERO)
barplot(countsGenero, main="GENEROS" , xlab = "GENEROS")
summary(dados$SCORE)
boxplot(dados$SCORE)
hist(dados$SCORE)
summary(dados$SCORE)
boxplot(dados$SCORE)
hist(dados$SCORE)
summary(dados$SCORE)
source('C:/Users/gustavo/DA-em-Python-e-R/limpeza e tratamendo de dados.R')
#Limpeza e Tratamento de Dados
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
#Colunas
#Dar nomes corretos as colunas
colnames(dados) = c("ID","SCORE","ESTADO","GENERO","IDADE","PATRIMONIO","SALDO","PRODUTOS","TEMCARTCREDITO","ATIVO","SALARIO","SAIU")
head(dados)
#Explorar dados , colunas categóricas
#Estados
countsEstado = table(dados$ESTADO)
countsEstado
barplot(countsEstado, main="ESTADOS" , xlab = "Estados")
#Generos
countsGenero = table(dados$GENERO)
barplot(countsGenero, main="GENEROS" , xlab = "GENEROS")
#Explorar colunas numericas
summary(dados$SCORE)
boxplot(dados$SCORE)
hist(dados$SCORE)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
dados = read.csv("Churn.csv" , sep = ";" , na.strings="" , stringAsFactors=T)
dados = read.csv("Churn.csv" , sep = ";" , na.strings="" , stringsAsFactors=T)
dados = read.csv("Churn.csv" , sep = ";" , na.strings="" , stringsAsFactors=T)
head(dados)
summary(dados)
colnames(dados) = c("Id","Score","Estado","Genero","Idade","Patrimonio","Saldo","Produtos","TemCartCredito","Ativo","Salario","Saiu")
colnames(dados) = c("Id","Score","Estado","Genero","Idade","Patrimonio","Saldo","Produtos","TemCartCredito","Ativo","Salario","Saiu")
head(dados)
View(dados)
counts = table(dados$Estado)
barplot(counts , main="Estados", xlab="Estados")
counts = table(dados$Genero)
barplot(counts, main="Gêneros", xlab="Gêneros")
summary(dados$Score)
boxplot(dados$Score)
ist(dados$Score)
hist(dados$Score)
summary(dados$Idade)
boxplot(dados$Idade)
hist(dados$Idade)
summary(dados$Saldo)
boxplot(dados$Saldo)
hist(dados$Saldo)
summary(dados$Salario)
boxplot(dados$Salario)
boxplot(dados$Salario,outline = F)
dados[!complete.cases(dados),]
#tratar salarios
summary(dados$Salario)
#ver mediana
median(dados$Salario,na.rm = T)
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
dados[!complete.cases(dados$Salario),]
#Atribuir mediana aos compos NA
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#Atribuir mediana aos compos NA
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#busca NAS em salario para checar.
dados[!complete.cases(dados$Salario),]
#tratar salarios
summary(dados$Salario)
#ver mediana
median(dados$Salario,na.rm = T)
#ver valores
unique(dados$Genero)
summary(dados$Genero)
#ver resultado
summary(dados$Genero)
dados[is.na(dados$Genero) | dados$Genero == "M",]$Genero = "Masculino"
dados[dados$Genero == "F" | dados$Genero == "Fem",]$Genero = "Feminino"
#ver resultado
summary(dados$Genero)
summary(dados$Genero)
#remover levels nao utilizados
dados$Genero = factor(dados$Genero)
#visualiza novamente
summary(dados$Genero)
summary(dados$Idade)
#fora do dominio , negativas ver idades anormais
dados[dados$Idade<0 | dados$Idade>110,]$Idade
#verificar se existe idade NA
dados[is.na(dados$Idade),]
#preencher com a mediana
median(dados$Idade)
#substituir
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade = median(dados$Idade)
dados[dados$Idade<0 | dados$Idade>110,]
summary(dados$Idade)
#Verificando se ainda há valores fora do dominio
dados[dados$Idade<0 | dados$Idade>90,]
summary(dados$Idade)
x = dados[duplicated(dados$Id)]
#busca duplicidades peo ID
x = dados[duplicated(dados$Id),]
x
#Remove o ID duplicado pelo indice
dados = dados[-c(82),]
#busca a linha que estava duplicada
dados[dados$Id == x$Id ,]
#verifca novamente se há duplicados
x = dados[duplicated(dados$Id),]
x
#fora do dominio - categorico
unique(dados$Estado)
summary(dados$Estado)
counts = table(dados$Estado)
barplot(counts , main="Estados", xlab="Estados")
#Estados
counts = table(dados$Estado)
barplot(counts , main="Estados", xlab="Estados")
#Genero
counts = table(dados$Genero)
barplot(counts, main="Gêneros", xlab="Gêneros")
#Score
summary(dados$Score)
hist(dados$Idade)
boxplot(dados$Score)
boxplot(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
#tratar salarios
summary(dados$Salario)
#Atribuir mediana aos compos NA
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#ver mediana
median(dados$Salario,na.rm = T)
#Atribuir mediana aos compos NA
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#busca NAS em salario para checar.
dados[!complete.cases(dados$Salario),]
#ver valores
unique(dados$Genero)
summary(dados$Genero)
#transformar F e Fem em Feminino
#"", M em Masculino (moda)
dados[is.na(dados$Genero) | dados$Genero == "M",]$Genero = "Masculino"
dados[dados$Genero == "F" | dados$Genero == "Fem",]$Genero = "Feminino"
#ver resultado
summary(dados$Genero)
#remover levels nao utilizados
dados$Genero = factor(dados$Genero)
#visualiza novamente
summary(dados$Genero)
#ver resultado
summary(dados$Genero)
#visualiza novamente
summary(dados$Genero)
#remover levels nao utilizados
dados$Genero = factor(dados$Genero)
#visualiza novamente
summary(dados$Genero)
#fora do dominio , negativas ver idades anormais
dados[dados$Idade<0 | dados$Idade>110,]$Idade
#verificar se existe idade NA
dados[is.na(dados$Idade),]
#uma solução é preencher com a mediana
median(dados$Idade)
#uma solução é preencher com a mediana
median(dados$Idade)
#substituir
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade = median(dados$Idade)
#Verificando se ainda há valores fora do dominio
dados[dados$Idade<0 | dados$Idade>110,]
summary(dados$Idade)
demo()
dados = read.csv("Churn.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
colnames(dados) = c("ID","SCORE","ESTADO","GENERO","IDADE","PATRIMONIO","SALDO","PRODUTOS","TEMCARTCREDITO","ATIVO","SALARIO","SAIU")
head(dados)
countsEstado = table(dados$ESTADO)
countsEstado
barplot(countsEstado, main="ESTADOS" , xlab = "Estados")
#Generos
countsGenero = table(dados$GENERO)
barplot(countsGenero, main="GENEROS" , xlab = "GENEROS")
summary(dados$SCORE)
boxplot(dados$SCORE)
hist(dados$SCORE)
#Idade
summary(dados$IDADE)
boxplot(dados$IDADE)
hist(dados$IDADE)
#Saldo
summary(dados$SALDO)
boxplot(dados$SALDO)
hist(dados$SALDO)
#Salário
summary(dados$SALARIO)
boxplot(dados$SALARIO)
boxplot(dados$SALARIO,outline = F)
dados[!complete.cases(dados),]
#tratar salarios
summary(dados$SALARIO)
#ver mediana
median(dados$SALARIO, na.rm = T)
#atribuir mediana nos NAs
dados[is.na(dados$SALARIO),]$SALARIO = median(dados$SALARIO,na.rm = T)
#buscar NAS em salario para checar
dados[!complete.cases(dados$SALARIO),]
#ver valores
unique(dados$GENERO)
summary(dados$GENERO)
#transformar F e Fem em Feminino
#"", M em Masculino (moda)
dados[is.na(dados$GENERO) | dados$GENERO == "M",]$GENERO = "Masculino"
dados[dados$GENERO == "F" | dados$GENERO == "Fem",]$GENERO = "Feminino"
#remover levels nao utilizados
dados$GENERO = factor(dados$GENERO)
#visualizar novamente
summary(dados$GENERO)
summary(dados$IDADE)
#fora do dominio numerico , ver idades anormais
dados[dados$IDADE<0 | dados$IDADE>110,]$IDADE
#não temos idade NAs
dados[is.na(dados$IDADE),]
#opção , preencher com mediana
median(dados$IDADE)
#substituição
dados[dados$IDADE<0 | dados$IDADE>110,]$IDADE = median(dados$IDADE)
dados[dados$IDADE<0 | dados$IDADE>110,]
summary(dados$IDADE)
#dados duplicados
#buscar duplicados pelo ID
x =  dados[duplicated(dados$ID),]
x
#verificamos que o ID 81 está duiplicado
#vamos excluir pelo ID não pelo indice
dados = dados [-c(82),]
#verificamos novamente duplicados
x =  dados[duplicated(dados$ID),]
x
#fora do dominio categorico
unique(dados$ESTADO)
summary(dados$ESTADO)
#preencher com a moda, RS
dados[!dados$ESTADO %in% c("RS","SC","PR"),]$ESTADO = "RS"
summary(dados$ESTADO)
#remover fatores nao usados
dados$ESTADO = factor(dados$ESTADO)
#visualizar novamente
summary(dados$ESTADO)
#outliers , criando um parametro com desvio padrão
desv = sd(dados$SALARIO, na.rm = T)
desv
dados[dados$SALARIO >= 2 *desv , ]$SALARIO
#outra forma, resultado semelhante, mas sem os NAs
boxplot(dados$SALARIO)
boxplot(dados$SALARIO, outline = F)
x = boxplot(dados$SALARIO)$out
x
#atualizamos todos para mediana
median(dados$SALARIO)
dados[dados$SALARIO >= 2 *desv , ]$SALARIO = median(dados$SALARIO)
#checamos se sairam os outliers
dados[dados$SALARIO >= 2 *desv , ]$SALARIO
dados[dados$SALARIO >= 2 *desv , ]$SALARIO = median(dados$SALARIO)
#checamos se sairam os outliers
dados[dados$SALARIO >= 2 *desv , ]$SALARIO
x = boxplot(dados$SALARIO)$out
x
#outra forma, resultado semelhante, mas sem os NAs
boxplot(dados$SALARIO)
boxplot(dados$SALARIO, outline = F)
x = boxplot(dados$SALARIO)$out
x
#outliers , criando um parametro com desvio padrão
desv = sd(dados$SALARIO, na.rm = T)
desv
dados[dados$SALARIO >= 2 *desv , ]$SALARIO
#outra forma, resultado semelhante, mas sem os NAs
boxplot(dados$SALARIO)
boxplot(dados$SALARIO, outline = F)
x = boxplot(dados$SALARIO)$out
x
#atualizamos todos para mediana
median(dados$SALARIO)
dados[dados$SALARIO >= 2 *desv , ]$SALARIO = median(dados$SALARIO)
#checamos se sairam os outliers
dados[dados$SALARIO >= 2 *desv , ]$SALARIO
dados = read.csv("tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
dados = read.csv("tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
dados = read.csv("tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(dados)
summary(dados)
tempo = read.csv("tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
tempo = read.csv("tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R")
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("C:\Users\gustavo\DA-em-Python-e-R\Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R")
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R")
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R")
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
setwd("C:/Users/gustavo/DA-em-Python-e-R")
tempo = read.csv("Tempo.csv" , sep = ";" , na.strings = "" , stringsAsFactors = T)
head(tempo)
summary(tempo)
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R")
#valores faltantes em NAs
dados[!complete.cases(dados),]
#valores faltantes em NAs
tempo[!complete.cases(tempo),]
#tratando faltantes
summary(tempo$Aparencia)
View(tempo)
View(tempo)
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R")
#valores faltantes em NAs
tempo[!complete.cases(tempo),]
tempo[is.na(dados$Aparencia),]
tempo[is.na(tempo$Aparencia),]
#valores faltantes em NAs
tempo[!complete.cases(tempo),]
#opção de preencher com a mediana
median(tempo$Aparencia)
#opção de preencher com a mediana
x = median(tempo$Aparencia)
#opção de preencher com a mediana
x = median(tempo$Aparencia)
#opção de preencher com a mediana
x = median.default(tempo$Aparencia)
#opção de preencher com a mediana
#substituição com moda
tempo[tempo$Aparencia == 'menos' ,]$Aparencia = 'sol'
summary(tempo$Aparencia)
tempo[is.na(tempo$Aparencia),]
#valores faltantes em NAs
tempo[!complete.cases(tempo),]
#remove levels nao utilizados
tempo$Aparencia = factor(dados$Aparencia)
#remove levels nao utilizados
tempo$Aparencia = factor(tempo$Aparencia)
summary(tempo$Aparencia)
#valores faltantes em NAs
tempo[!complete.cases(tempo),]
#Temperatura, tratar dominio
summary(tempo$Temperatura)
#ver temperaturas anormais em F
tempo[tempo$Temperatura < -130 | tempo$Temperatura > 130 ,]$Temperatura
#não temos NAs
dados[is.na(dados$Temperatura),]
#Sem NAs
tempo[is.na(tempo$Temperatura),]
#opção, preencher com mediana
median(tempo$Temperatura)
#substituir
tempo[tempo$Temperatura < -135 | tempo$Temperatura > 130 ,]$Temperatura = median(dados$Temperatura)
#substituir
tempo[tempo$Temperatura < -135 | tempo$Temperatura > 130 ,]$Temperatura = median(tempo$Temperatura)
#consulta demais
dados[dados$Temperatura< -135 | dados$Temperatura > 130 ,]$Temperatura
#consulta demais
tempo[tempo$Temperatura< -135 | tempo$Temperatura > 130 ,]$Temperatura
summary(dados$Temperatura)
summary(tempo$Temperatura)
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R", encoding = 'ISO8859-1')
#Umidade, analise de dominio e NAs
summary(tempo$Umidade)
#fora do dominio - ver valores anormais
tempo[dados$Umidade < 0 | tempo$Umidade > 100 ,]$Umidade
#fora do dominio - ver valores anormais
tempo[tempo$Umidade < 0 | tempo$Umidade > 100 ,]$Umidade
#consulta NAs
tempo[is.na(tempo$Umidade),]
#atribuir mediana a NAs
tempo[is.na(tempo$Umidade),]$Umidade = median(tempo$Umidade,na.rm = T)
#consulta NAs
tempo[is.na(tempo$Umidade),]
#subtituição
tempo[tempo$Umidade < 0 | tempo$Umidade > 100 ,]$Umidade = median(tempo$Umidade)
tempo[is.na(tempo$Umidade),]$Umidade > 100 ,]$Umidade = median(tempo$Umidade)
#buscamos novamente valores anormais
dados[dados$Umidade < 0 | dados$Umidade > 100 ,]
#buscamos novamente valores anormais
tempo[tempo$Umidade < 0 | tempo$Umidade > 100 ,]
summary(tempo$Umidade)
#VENTO NAs
summary(tempo$Vento)
#VENTO NAs
summary(tempo$Vento)
#Verifica NAs
tempo[is.na(tempo$Vento),]
#substitui
tempo[is.na(tempo$Vento),]$Vento = 'FALSO'
#Verifica NAs novamente
tempo[is.na(tempo$Vento),]
#Verifica NAs
tempo[is.na(tempo$Vento),]
#VENTO NAs
summary(tempo$Vento)
source("C:/Users/gustavo/DA-em-Python-e-R/pratica- tempo.R", encoding = 'ISO8859-1')
